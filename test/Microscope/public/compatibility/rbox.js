function RBox(settings,box,pointerSides){    var boxPointerRightMiddle, boxPointerLeftMiddle, boxPointerTopMiddle, boxPointerBottomMiddle,boxPointerScale,	pointers = [],group;	if(settings.styles.isLocked){		group = new Kinetic.Group({			draggable: settings.styles.isDraggable,			dragBoundFunc: function(pos) {				  return {					y: 0,					x: 0				  };			}		});	}	else{		group = new Kinetic.Group({			draggable: settings.styles.isDraggable,			id:settings.styles.itemIndex		});	}		group.getWidth = function(){		return box.getWidth();	};		group.getHeight = function(){		return box.getHeight();	};		group.getCurrentX = function(){		return box.getX();	};		group.getCurrentY = function(){		return box.getY();	};			var defaultPointerSides = {		left:false,		right:false,		top:false,		bottom:false	}	setBoxMouseEvents(box);	setPointers(box,$.extend( true, {}, defaultPointerSides, pointerSides ));		function hidePointers(){		box.setStroke(settings.styles.stroke);		for(var i =0; i< pointers.length; i++){			pointers[i].kn.hide();		}		box.isSelected = !box.isSelected;	}		function showPointers(types){		box.setStroke('#FF4D4D');		for(var i =0; i< pointers.length; i++){			pointers[i].kn.show();		}		if(boxPointerBottomMiddle){			boxPointerBottomMiddle.kn.setY(box.getY() + box.getHeight() - settings.pWidth/2);		}		box.isSelected = !box.isSelected;	}		function setBoxMouseEvents(box){		box.isSelected = false;		box.on('mouseover', function() {			document.body.style.cursor = 'pointer';		});				box.on('mouseout', function() {			document.body.style.cursor = 'default';		});		  		box.on('mousedown', function() {			if(box.isSelected){				hidePointers();			}			else{				ItemPool.selectItem(group);				showPointers();			}		});				group.on('dragend', function() {			var anim = new Kinetic.Animation(function(frame) {				group.move({					x:-box.getAbsolutePosition().x % Global.CELL_WIDTH,					y:-box.getAbsolutePosition().y % Global.CELL_HEIGHT				});			}, layer);			//anim.start();			group.move({					x:-box.getAbsolutePosition().x % Global.CELL_WIDTH,					y:-box.getAbsolutePosition().y % Global.CELL_HEIGHT			});			layer.draw();		});			}	function getGridXIndex(x){		return rowIndex = Math.floor(x/Global.CELL_WIDTH);	}	function getGridX(x){		var rowIndex = Math.floor(x/Global.CELL_WIDTH);		if(rowIndex ===0){			return Global.CELL_WIDTH;		}		//if(x % Global.CELL_WIDTH >= Global.CELL_WIDTH/2){		//	rowIndex++;		//}				return rowIndex * Global.CELL_WIDTH;	}		function getLeftGridX(x){		var rowIndex = Math.floor(x/Global.CELL_WIDTH);		return (rowIndex  + 1 )* Global.CELL_WIDTH ;	}		function getTopGridY(y){		var columnIndex = Math.floor(y/Global.CELL_HEIGHT);		return (columnIndex  + 1 )* Global.CELL_HEIGHT ;			}		function getGridY(y){		var columnIndex = Math.floor(y/Global.CELL_HEIGHT);		if(columnIndex ===0){			return Global.CELL_HEIGHT;		}		//if(y % Global.CELL_HEIGHT >= Global.CELL_HEIGHT/2){		//	columnIndex++;		//}		return columnIndex * Global.CELL_HEIGHT;	}		function onRightPointerDragEnd(isGridBound){		if(isGridBound === true)			box.setWidth(getGridX(boxPointerRightMiddle.kn.getX() - box.getX() + boxPointerRightMiddle.kn.getWidth()/2));		else			box.setWidth(boxPointerRightMiddle.kn.getX() - box.getX() + boxPointerRightMiddle.kn.getWidth()/2);		if(boxPointerTopMiddle)			boxPointerTopMiddle.kn.setX(box.getX() + box.getWidth()/2 - boxPointerTopMiddle.kn.getWidth()/2);		if(boxPointerBottomMiddle)			boxPointerBottomMiddle.kn.setX(box.getX() + box.getWidth()/2 - boxPointerBottomMiddle.kn.getWidth()/2);		if(boxPointerScale)				boxPointerScale.kn.setX(box.getX() + box.getWidth() - settings.pWidth/2);						if(box.siblings){			for(var i = 0; i < box.siblings.length; i++){				box.siblings[i].setWidth(box.getWidth());			}		}	}		function onLeftPointerDragEnd(isGridBound){				if(isGridBound === true){			box.setWidth(getGridX(box.getWidth() + box.getX() - (boxPointerLeftMiddle.kn.getX() + boxPointerLeftMiddle.kn.getWidth()/2)));			box.setX(getLeftGridX(boxPointerLeftMiddle.kn.getX() + boxPointerLeftMiddle.kn.getWidth()/2));		}		else{			box.setWidth(box.getWidth() + box.getX() - (boxPointerLeftMiddle.kn.getX() + boxPointerLeftMiddle.kn.getWidth()/2));			box.setX(boxPointerLeftMiddle.kn.getX() + boxPointerLeftMiddle.kn.getWidth()/2);		}		if(boxPointerTopMiddle)			boxPointerTopMiddle.kn.setX(box.getX() + box.getWidth()/2 - boxPointerTopMiddle.kn.getWidth()/2);		if(boxPointerBottomMiddle)			boxPointerBottomMiddle.kn.setX(box.getX() + box.getWidth()/2 - boxPointerBottomMiddle.kn.getWidth()/2);				}		function onTopPointerDragEnd(isGridBound){			box.prevHeight = box.getHeight();		if(isGridBound === true){			box.setHeight(getGridY(box.getHeight() + box.getY() - (boxPointerTopMiddle.kn.getY() + boxPointerTopMiddle.kn.getHeight()/2)));			box.setY(getTopGridY(boxPointerTopMiddle.kn.getY() + boxPointerTopMiddle.kn.getHeight()/2));					}		else{			box.setHeight(box.getHeight() + box.getY() - (boxPointerTopMiddle.kn.getY() + boxPointerTopMiddle.kn.getHeight()/2));			box.setY(boxPointerTopMiddle.kn.getY() + boxPointerTopMiddle.kn.getHeight()/2);		}		if(boxPointerRightMiddle)			boxPointerRightMiddle.kn.setY(box.getY() + box.getHeight()/2 - boxPointerRightMiddle.kn.getHeight()/2);		if(boxPointerLeftMiddle)			boxPointerLeftMiddle.kn.setY(box.getY() + box.getHeight()/2 - boxPointerLeftMiddle.kn.getHeight()/2);								if(box.siblings){			for(var i = 0; i < box.siblings.length; i++){				box.siblings[i].setHeight(box.getHeight());				box.siblings[i].setY(box.siblings[i].getY() + box.prevHeight - box.getHeight());			}		}			if(box.tops){			for(var i = 0; i < box.tops.length; i++){				box.tops[i].setHeight(box.tops[i].getHeight() + box.prevHeight - box.getHeight());			}		}		}		function onBottomPointerDragEnd(isGridBound){		box.prevHeight = box.getHeight();		if(isGridBound === true){			box.setHeight(getGridY(boxPointerBottomMiddle.kn.getY() - box.getY() + boxPointerBottomMiddle.kn.getHeight()/2));			}		else{			box.setHeight(boxPointerBottomMiddle.kn.getY() - box.getY() + boxPointerBottomMiddle.kn.getHeight()/2);		}				if(boxPointerRightMiddle)			boxPointerRightMiddle.kn.setY(box.getY() + box.getHeight()/2 - boxPointerRightMiddle.kn.getHeight()/2);		if(boxPointerRightMiddle)			boxPointerLeftMiddle.kn.setY(box.getY() + box.getHeight()/2 - boxPointerLeftMiddle.kn.getHeight()/2);		if(boxPointerScale)				boxPointerScale.kn.setY(box.getY() + box.getHeight() - settings.pWidth/2);						if(box.siblings){			for(var i = 0; i < box.siblings.length; i++){				box.siblings[i].setHeight(box.getHeight());			}		}		if(box.bottoms){			for(var i = 0; i < box.bottoms.length; i++){				box.bottoms[i].setY(box.bottoms[i].getY() + box.getHeight() - box.prevHeight);			}		}		}		function onScalePointerDragEnd(isGridBound){		if(isGridBound === true){			box.setWidth(getGridX(boxPointerScale.kn.getX() - box.getX() + boxPointerScale.kn.getWidth()/2));			box.setHeight(getGridY(boxPointerScale.kn.getY() - box.getY() + boxPointerScale.kn.getHeight()/2));		}		else{			box.setWidth(boxPointerScale.kn.getX() - box.getX() + boxPointerScale.kn.getWidth()/2);			box.setHeight(boxPointerScale.kn.getY() - box.getY() + boxPointerScale.kn.getHeight()/2);		}				rePositionMiddlePointers();	}		function rePositionMiddlePointers(){		boxPointerLeftMiddle.kn.setY(box.getY() + box.getHeight()/2 - settings.pWidth/2);		boxPointerTopMiddle.kn.setX(box.getX() + box.getWidth()/2 - settings.pWidth/2);				boxPointerRightMiddle.kn.setX(box.getX() + box.getWidth() - settings.pWidth/2);		boxPointerRightMiddle.kn.setY(box.getY() + box.getHeight()/2 - settings.pWidth/2);				boxPointerBottomMiddle.kn.setX(box.getX() + box.getWidth()/2 - settings.pWidth/2);		boxPointerBottomMiddle.kn.setY(box.getY() + box.getHeight() - settings.pWidth/2);	}		function setPointers(box,sides){		if(sides.scale){			boxPointerScale = RPoint({				x: box.getX() + box.getWidth() - settings.pWidth/2,				y: box.getY() + box.getHeight() - settings.pWidth/2,				type:"S",				box:box,				pWidth:settings.pWidth,				dragCallback: onScalePointerDragEnd			});						boxPointerScale.kn.on('dragend', function() {				onScalePointerDragEnd(true);				boxPointerScale.kn.setX(box.getX() + box.getWidth() - settings.pWidth/2);				boxPointerScale.kn.setY(box.getY() + box.getHeight() - settings.pWidth/2);				layer.draw();			});						pointers.push(boxPointerScale);		}		if(sides.right)		{			boxPointerRightMiddle = RPoint({				x: box.getX() + box.getWidth() - settings.pWidth/2,				y: box.getY() + box.getHeight()/2 - settings.pWidth/2,				type:"H",				pWidth:settings.pWidth,				dragCallback: onRightPointerDragEnd			});						boxPointerRightMiddle.kn.on('dragend', function() {				onRightPointerDragEnd(true);				boxPointerRightMiddle.kn.setX(box.getX() + box.getWidth() - boxPointerRightMiddle.kn.getWidth()/2);				layer.draw();			});						pointers.push(boxPointerRightMiddle);		}				if(sides.left)		{			boxPointerLeftMiddle = RPoint({				x: box.getX() - settings.pWidth/2,				y: box.getY() + box.getHeight()/2 - settings.pWidth/2,				pWidth:settings.pWidth,				type:"H",				dragCallback: onLeftPointerDragEnd			});						boxPointerLeftMiddle.kn.on('dragend', function() {				onLeftPointerDragEnd(true);				boxPointerLeftMiddle.kn.setX(box.getX() - boxPointerLeftMiddle.kn.getWidth()/2);				layer.draw();			});						pointers.push(boxPointerLeftMiddle);		}				if(sides.top)		{			boxPointerTopMiddle = RPoint({				x: box.getX() + box.getWidth()/2 - settings.pWidth/2,				y: box.getY() - settings.pWidth/2,				pWidth:settings.pWidth,				type:"V",				dragCallback: onTopPointerDragEnd			});						boxPointerTopMiddle.kn.on('dragend', function() {				onTopPointerDragEnd(true);				boxPointerTopMiddle.kn.setY(box.getY() - boxPointerTopMiddle.kn.getHeight()/2);				layer.draw();			});						pointers.push(boxPointerTopMiddle);		}				if(sides.bottom)		{			boxPointerBottomMiddle = RPoint({				x: box.getX() + box.getWidth()/2 - settings.pWidth/2,				y: box.getY() + box.getHeight() - settings.pWidth/2,				pWidth:settings.pWidth,				type:"V",				dragCallback: onBottomPointerDragEnd			});						boxPointerBottomMiddle.kn.on('dragend', function() {				onBottomPointerDragEnd(true);				boxPointerBottomMiddle.kn.setY(box.getY() + box.getHeight() - boxPointerTopMiddle.kn.getHeight()/2);				layer.draw();			});						pointers.push(boxPointerBottomMiddle);		}		group.add(box);				for(var i =0; i< pointers.length; i++){			group.add(pointers[i].kn);		}			}	group.hidePointers = hidePointers;	return{		kn:group,		box:box,		showPointers:showPointers,		hidePointers:hidePointers	}}