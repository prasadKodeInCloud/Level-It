function RPoint(options){	var timer,defaults = {		fill: '#FF4D4D',        stroke: '#FF1919',        strokeWidth: 1,        draggable: true,		visible: false,		pWidth:9,		x:10,		y:10,		box:null,		dragCallback:null,		type:"H",		pWidth:9	}		var settings = $.extend( true,{}, defaults, options );	//Scale pointer	if(settings.type == "S"){		settings.fill = '#CFFFC9',        settings.stroke = '#78E378',		settings.pWidth = 7	}	var box = settings.box;	var sin45 =  Math.sin(45/180*Math.PI);	//console.log('ponter x: ' + settings.x + ", pointer y : " + settings.y );	var self = new Kinetic.Rect({        x: settings.x,        y: settings.y,        width: settings.pWidth,        height: settings.pWidth,        fill: settings.fill,        stroke: settings.stroke,        strokeWidth: settings.strokeWidth,        draggable: settings.draggable,		visible: settings.visible,				dragBoundFunc: function(pos) {			if(settings.type.toUpperCase().trim() =="H"){				return {					x: pos.x,					y: this.getAbsolutePosition().y				}		    }			else if(settings.type.toUpperCase().trim() =="V"){				return {					x: this.getAbsolutePosition().x,					y: pos.y				}		    } 			else if(settings.type.toUpperCase().trim() =="S"){				return {					x:pos.x < box.getAbsolutePosition().x + Global.CELL_WIDTH? box.getAbsolutePosition().x + Global.CELL_WIDTH - this.getWidth()/2 : pos.x,					y: pos.y < box.getAbsolutePosition().y + Global.CELL_HEIGHT? box.getAbsolutePosition().y + Global.CELL_HEIGHT - this.getHeight()/2 : pos.y					//x:pos.x,					//y:pos.y				}			}		          }    });		self.on('mouseover', function() {		if(settings.type == "H")			document.body.style.cursor = 'w-resize';		else if(settings.type == "V")			document.body.style.cursor = 'n-resize';		else if(settings.type == "S")			document.body.style.cursor = 'nwse-resize';	});			self.on('mouseout', function() {			document.body.style.cursor = 'default';	});		self.on('dragstart', function() {		//console.log('drag start right');		if(typeof(settings.dragCallback) === 'function')			timer = setInterval(function () { settings.dragCallback() }, 10);            });		self.on('dragend', function() {		if(timer)			clearInterval(timer);		//console.log('stop update Right');    });		return{		kn:self,		setDragCallback : function(callback){			settings.dragCallback = callback;		}	};}